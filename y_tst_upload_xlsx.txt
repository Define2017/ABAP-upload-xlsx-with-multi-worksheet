*&---------------------------------------------------------------------*
*& Report  Y_TST_UPLOAD_XLSX
*&---------------------------------------------------------------------*
REPORT y_tst_upload_xlsx.

PARAMETERS:
p_file  TYPE string.

TYPES:
gtyp_t_pa0001 TYPE TABLE OF pa0001.

DATA:
  x_file TYPE xstring,
  lt_hex TYPE TABLE OF so_raw255,
  l_size TYPE i.

DATA lv_str TYPE string.


DATA:
gt_outtab TYPE TABLE OF pa0001.

DATA:
lo_spreadsheet TYPE REF TO cl_fdt_xl_spreadsheet.

START-OF-SELECTION.

  CASE cl_gui_alv_grid=>offline( ).
    WHEN 0. "Online upload

      TRY.
          DATA lo_openxml_not_found TYPE REF TO cx_openxml_not_found.

          CALL METHOD cl_openxml_helper=>load_local_file
            EXPORTING
              im_file_name = p_file
            RECEIVING
              re_data      = x_file.

        CATCH cx_openxml_not_found INTO lo_openxml_not_found.
          lv_str = lo_openxml_not_found->if_message~get_longtext( ) .

          MESSAGE lv_str TYPE 'E'.

      ENDTRY.

    WHEN OTHERS. "offline upload

      FIELD-SYMBOLS:
      <fs_xml> TYPE so_raw255.

      DATA:
      lv_line TYPE xstring.

      OPEN DATASET p_file IN BINARY MODE FOR INPUT.
      IF sy-subrc = 0.
        DO.
          READ DATASET p_file INTO lv_line.
          IF sy-subrc <> 0.
            EXIT.
          ENDIF.

          CONCATENATE x_file lv_line INTO x_file IN BYTE MODE.

        ENDDO.
      ENDIF.
      CLOSE DATASET p_file.

  ENDCASE.

  TRY.
      DATA:
      lo_cx TYPE REF TO cx_fdt_excel_core.

      CREATE OBJECT lo_spreadsheet
        EXPORTING
          document_name = p_file
          xdocument     = x_file.
*         mime_type     =

    CATCH cx_fdt_excel_core.
      RETURN.

  ENDTRY.

  CHECK lo_spreadsheet IS BOUND.

  FIELD-SYMBOLS:
  <fs_worksheet> TYPE string.

  DATA:
    lref_data     TYPE REF TO data,
    lt_worksheets TYPE STANDARD TABLE OF string.

* Get Wroksheets
  lo_spreadsheet->if_fdt_doc_spreadsheet~get_worksheet_names( IMPORTING
                                                                 worksheet_names = lt_worksheets ).

* Worksheet to get data
  READ TABLE lt_worksheets ASSIGNING <fs_worksheet> INDEX 1.

* Get worksheet data
  lref_data = lo_spreadsheet->if_fdt_doc_spreadsheet~get_itab_from_worksheet( worksheet_name = <fs_worksheet> ).

  CHECK lref_data IS BOUND.

** Map Dynamic internal table to pa0001
*
*  FIELD-SYMBOLS:
*    <dyn_table> TYPE STANDARD TABLE,
*    <dyn_line>  TYPE any,
*    <fs_comp1>  TYPE any,
*    <fs_comp2>  TYPE any.
*
*  DATA:
*    ls_pa0001 TYPE pa0001,
*    lt_pa0001 TYPE TABLE OF pa0001.
*
*  ASSIGN lref_data->* TO <dyn_table>.
*  DELETE <dyn_table> INDEX 1. "delete header.
*
*  CHECK <dyn_table> IS ASSIGNED.

*  FIELD-SYMBOLS:
*  <fs_type> TYPE sydes_typeinfo.
*
*  DATA:
*  lt_type TYPE sydes_desc.
*
*  LOOP AT <dyn_table> ASSIGNING <dyn_line>.
*    sy-index = 1.
*    DO.
*      ASSIGN COMPONENT sy-index OF STRUCTURE <dyn_line> TO <fs_comp1>.
*      IF sy-subrc <> 0.
*        EXIT.
*      ENDIF.
*
*      ASSIGN COMPONENT sy-index OF STRUCTURE ls_pa0001  TO <fs_comp2>.
*      DESCRIBE FIELD <fs_comp2> INTO lt_type.
*
*      READ TABLE lt_type-types ASSIGNING <fs_type> INDEX 1.
*
*      CASE <fs_type>-type.
*        WHEN 'D'. "Date type
*          CHECK <fs_comp1> IS NOT INITIAL.
*
*          <fs_comp2> = <fs_comp1>(4) && <fs_comp1>+5(2) && <fs_comp1>+8(2).
*
*
*        WHEN OTHERS.
*          <fs_comp2> = <fs_comp1>.
*      ENDCASE.
*
*    ENDDO.
*
*    APPEND ls_pa0001 TO lt_pa0001.
*
*  ENDLOOP.
*
*  CHECK lt_pa0001[] IS NOT INITIAL.
